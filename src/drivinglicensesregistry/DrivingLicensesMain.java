package drivinglicensesregistry;

import drivinglicensesregistry.exceptions.NonexistentEntityException;
import java.awt.Toolkit;
import java.text.Normalizer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nikolaos
 */
public class DrivingLicensesMain extends javax.swing.JFrame {
    /**
     * Creates new form NewJFrame
     */
    public DrivingLicensesMain() {
        initComponents();
        setIcon();
        btnAdvancedEdit.setEnabled(false);
        btnAdvancedDelete.setEnabled(false);
        createSearchLicensesTable();
        createAdvancedLicensesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelSearch = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSearchLicenses = new javax.swing.JTable();
        jtfSearchSearch = new javax.swing.JTextField();
        btnSearchSearch = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jtfSearchLicenseId = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jtfSearchLastname = new javax.swing.JTextField();
        jtfSearchFirstname = new javax.swing.JTextField();
        jtfSearchMiddlename = new javax.swing.JTextField();
        jtfSearchBirthYear = new javax.swing.JTextField();
        jtfSearchFirstLicense = new javax.swing.JTextField();
        jPanelAdvanced = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAdvancedLicenses = new javax.swing.JTable();
        jtfAdvancedSearch = new javax.swing.JTextField();
        btnAdvancedSearchWithLastname = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jtfAdvancedLicenseId = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jtfAdvancedLastname = new javax.swing.JTextField();
        jtfAdvancedFirstname = new javax.swing.JTextField();
        jtfAdvancedMiddlename = new javax.swing.JTextField();
        jtfAdvancedBirthYear = new javax.swing.JTextField();
        btnAdvancedInsert = new javax.swing.JButton();
        btnAdvancedClear = new javax.swing.JButton();
        btnAdvancedEdit = new javax.swing.JButton();
        btnAdvancedDelete = new javax.swing.JButton();
        btnAdvancedSearchWithLicenseId = new javax.swing.JButton();
        jDateChooserAdvancedFirstLicense = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DRIVING LICENSES REGISTRY");
        setMinimumSize(new java.awt.Dimension(800, 570));
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(0, 153, 153));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 510));

        jPanelSearch.setBackground(new java.awt.Color(0, 153, 153));

        jPanel10.setBackground(new java.awt.Color(0, 153, 153));
        jPanel10.setPreferredSize(new java.awt.Dimension(380, 460));

        tblSearchLicenses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSearchLicenses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSearchLicensesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblSearchLicenses);

        jtfSearchSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchSearch.setNextFocusableComponent(jtfSearchSearch);

        btnSearchSearch.setBackground(new java.awt.Color(255, 102, 0));
        btnSearchSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearchSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchSearch.setText("SEARCH");
        btnSearchSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jtfSearchSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchSearch)
                        .addGap(0, 87, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSearchSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(0, 153, 153));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DRIVING LICENSE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel11.setPreferredSize(new java.awt.Dimension(380, 460));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 0));
        jLabel17.setText("LICENSE ID:");
        jLabel17.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel17.setPreferredSize(new java.awt.Dimension(34, 20));

        jtfSearchLicenseId.setEditable(false);
        jtfSearchLicenseId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchLicenseId.setForeground(new java.awt.Color(0, 0, 255));
        jtfSearchLicenseId.setFocusable(false);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 0));
        jLabel18.setText("LASTNAME:");
        jLabel18.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 0));
        jLabel19.setText("FIRSTNAME:");
        jLabel19.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel19.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 0));
        jLabel20.setText("FATHER'S NAME:");
        jLabel20.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 0));
        jLabel21.setText("BIRTH YEAR:");
        jLabel21.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel21.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 0));
        jLabel22.setText("FIRST LICENSE:");
        jLabel22.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel22.setPreferredSize(new java.awt.Dimension(34, 20));

        jtfSearchLastname.setEditable(false);
        jtfSearchLastname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchLastname.setFocusable(false);

        jtfSearchFirstname.setEditable(false);
        jtfSearchFirstname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchFirstname.setFocusable(false);

        jtfSearchMiddlename.setEditable(false);
        jtfSearchMiddlename.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchMiddlename.setFocusable(false);

        jtfSearchBirthYear.setEditable(false);
        jtfSearchBirthYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchBirthYear.setFocusable(false);

        jtfSearchFirstLicense.setEditable(false);
        jtfSearchFirstLicense.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfSearchFirstLicense.setFocusable(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfSearchLicenseId, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtfSearchLastname))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtfSearchFirstname))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtfSearchMiddlename))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtfSearchBirthYear))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtfSearchFirstLicense)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchMiddlename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchFirstLicense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("SEARCH", jPanelSearch);

        jPanelAdvanced.setBackground(new java.awt.Color(0, 153, 153));

        jPanel12.setBackground(new java.awt.Color(0, 153, 153));
        jPanel12.setPreferredSize(new java.awt.Dimension(380, 460));

        tblAdvancedLicenses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAdvancedLicenses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAdvancedLicensesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblAdvancedLicenses);

        jtfAdvancedSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfAdvancedSearch.setNextFocusableComponent(jtfAdvancedSearch);

        btnAdvancedSearchWithLastname.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedSearchWithLastname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedSearchWithLastname.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedSearchWithLastname.setText("SEARCH");
        btnAdvancedSearchWithLastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedSearchWithLastnameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jtfAdvancedSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdvancedSearchWithLastname)
                        .addGap(0, 87, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfAdvancedSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdvancedSearchWithLastname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel13.setBackground(new java.awt.Color(0, 153, 153));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DRIVING LICENSE", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel13.setPreferredSize(new java.awt.Dimension(380, 460));

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 0));
        jLabel23.setText("LICENSE ID:");
        jLabel23.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel23.setPreferredSize(new java.awt.Dimension(34, 20));

        jtfAdvancedLicenseId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfAdvancedLicenseId.setForeground(new java.awt.Color(0, 0, 255));
        jtfAdvancedLicenseId.setNextFocusableComponent(jtfAdvancedLastname);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 0));
        jLabel24.setText("LASTNAME:");
        jLabel24.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel24.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 0));
        jLabel25.setText("FIRSTNAME:");
        jLabel25.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel25.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 0));
        jLabel26.setText("FATHER'S NAME:");
        jLabel26.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel26.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 0));
        jLabel27.setText("BIRTH YEAR:");
        jLabel27.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel27.setPreferredSize(new java.awt.Dimension(34, 20));

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 0));
        jLabel28.setText("FIRST LICENSE:");
        jLabel28.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabel28.setPreferredSize(new java.awt.Dimension(34, 20));

        jtfAdvancedLastname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jtfAdvancedFirstname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jtfAdvancedMiddlename.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jtfAdvancedBirthYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        btnAdvancedInsert.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedInsert.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedInsert.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedInsert.setText("INSERT");
        btnAdvancedInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedInsertActionPerformed(evt);
            }
        });

        btnAdvancedClear.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedClear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedClear.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedClear.setText("CLEAR/DESELECT");
        btnAdvancedClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedClearActionPerformed(evt);
            }
        });

        btnAdvancedEdit.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedEdit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedEdit.setText("EDIT");
        btnAdvancedEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedEditActionPerformed(evt);
            }
        });

        btnAdvancedDelete.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedDelete.setText("DELETE");
        btnAdvancedDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedDeleteActionPerformed(evt);
            }
        });

        btnAdvancedSearchWithLicenseId.setBackground(new java.awt.Color(255, 102, 0));
        btnAdvancedSearchWithLicenseId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAdvancedSearchWithLicenseId.setForeground(new java.awt.Color(255, 255, 255));
        btnAdvancedSearchWithLicenseId.setText("FIND");
        btnAdvancedSearchWithLicenseId.setMaximumSize(new java.awt.Dimension(32767, 32767));
        btnAdvancedSearchWithLicenseId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvancedSearchWithLicenseIdActionPerformed(evt);
            }
        });

        //jDateChooserAdvancedFirstLicense.setLocale(new Locale("el", "GR"));
        jDateChooserAdvancedFirstLicense.setDateFormatString("dd/MM/yyyy");
        jDateChooserAdvancedFirstLicense.setFocusCycleRoot(true);
        jDateChooserAdvancedFirstLicense.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jDateChooserAdvancedFirstLicense.setNextFocusableComponent(jDateChooserAdvancedFirstLicense);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfAdvancedBirthYear)
                                    .addComponent(jDateChooserAdvancedFirstLicense, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAdvancedInsert, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                    .addComponent(btnAdvancedEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAdvancedClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAdvancedDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfAdvancedLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAdvancedSearchWithLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfAdvancedMiddlename))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfAdvancedLastname))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfAdvancedFirstname))))
                .addGap(13, 13, 13))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAdvancedLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdvancedSearchWithLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAdvancedLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAdvancedFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAdvancedMiddlename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfAdvancedBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserAdvancedFirstLicense, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdvancedInsert)
                    .addComponent(btnAdvancedClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdvancedEdit)
                    .addComponent(btnAdvancedDelete))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jtfAdvancedBirthYear, jtfAdvancedFirstname, jtfAdvancedLastname, jtfAdvancedMiddlename});

        javax.swing.GroupLayout jPanelAdvancedLayout = new javax.swing.GroupLayout(jPanelAdvanced);
        jPanelAdvanced.setLayout(jPanelAdvancedLayout);
        jPanelAdvancedLayout.setHorizontalGroup(
            jPanelAdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdvancedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelAdvancedLayout.setVerticalGroup(
            jPanelAdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAdvancedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAdvancedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("ADVANCED", jPanelAdvanced);

        jPanel3.setBackground(new java.awt.Color(0, 0, 141));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        jLabel3.setAlignmentX(0.5F);
        jLabel3.setMaximumSize(new java.awt.Dimension(10, 10));
        jLabel3.setMinimumSize(new java.awt.Dimension(10, 10));
        jLabel3.setPreferredSize(new java.awt.Dimension(10, 10));
        jPanel3.add(jLabel3);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 255, 255));
        jLabel1.setText("KOUKLAS NIKOLAOS - Computer Science BSc, Engineering of Pervasive Computing Systems MSc ");
        jLabel1.setAlignmentX(0.5F);
        jPanel3.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Email: nick.kouklas@gmail.com");
        jLabel2.setAlignmentX(0.5F);
        jPanel3.add(jLabel2);

        jLabel5.setAlignmentX(0.5F);
        jLabel5.setMaximumSize(new java.awt.Dimension(10, 10));
        jLabel5.setMinimumSize(new java.awt.Dimension(10, 10));
        jLabel5.setPreferredSize(new java.awt.Dimension(10, 10));
        jPanel3.add(jLabel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconframe.png")));
    }
    
    private void tblSearchLicensesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSearchLicensesMouseClicked
        int rowNum = tblSearchLicenses.getSelectedRow();
        int newSelectedSearchLicenseId = Integer.parseInt(tblSearchLicenses.getValueAt(rowNum, 0).toString());
        
        if(newSelectedSearchLicenseId != selectedSearchLicenseId) {
            selectedSearchLicenseId = newSelectedSearchLicenseId;
            
            jtfSearchLicenseId.setText((String) tblSearchLicenses.getValueAt(rowNum, 1));
            jtfSearchLastname.setText((String) tblSearchLicenses.getValueAt(rowNum, 2));
            jtfSearchFirstname.setText((String) tblSearchLicenses.getValueAt(rowNum, 3));
            jtfSearchMiddlename.setText((String) tblSearchLicenses.getValueAt(rowNum, 4));
            jtfSearchBirthYear.setText((String) tblSearchLicenses.getValueAt(rowNum, 5));
            jtfSearchFirstLicense.setText((String) tblSearchLicenses.getValueAt(rowNum, 6));
        }
    }//GEN-LAST:event_tblSearchLicensesMouseClicked

    private void tblAdvancedLicensesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAdvancedLicensesMouseClicked
        int rowNum = tblAdvancedLicenses.getSelectedRow();
        int newSelectedAdvancedLicenseId = Integer.parseInt(tblAdvancedLicenses.getValueAt(rowNum, 0).toString());
        
        if(newSelectedAdvancedLicenseId != selectedAdvancedLicenseId) {
            btnAdvancedEdit.setEnabled(true);
            btnAdvancedDelete.setEnabled(true);
            btnAdvancedInsert.setEnabled(false);
            btnAdvancedSearchWithLicenseId.setEnabled(false);
            btnAdvancedSearchWithLicenseId.setText("SELECTED");
            selectedAdvancedLicenseId = newSelectedAdvancedLicenseId;
            
            jtfAdvancedLicenseId.setText((String) tblAdvancedLicenses.getValueAt(rowNum, 1));
            jtfAdvancedLastname.setText((String) tblAdvancedLicenses.getValueAt(rowNum, 2));
            jtfAdvancedFirstname.setText((String) tblAdvancedLicenses.getValueAt(rowNum, 3));
            jtfAdvancedMiddlename.setText((String) tblAdvancedLicenses.getValueAt(rowNum, 4));
            jtfAdvancedBirthYear.setText((String) tblAdvancedLicenses.getValueAt(rowNum, 5));
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            try {
                jDateChooserAdvancedFirstLicense.setDate(sdf.parse((String) tblAdvancedLicenses.getValueAt(rowNum, 6)));
            } catch (ParseException ex) {
                Logger.getLogger(DrivingLicensesMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tblAdvancedLicensesMouseClicked

    private void btnSearchSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSearchActionPerformed
        bindSearchLicensesTable();
    }//GEN-LAST:event_btnSearchSearchActionPerformed

    private void btnAdvancedSearchWithLastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedSearchWithLastnameActionPerformed
        bindAdvancedLicensesTable();
    }//GEN-LAST:event_btnAdvancedSearchWithLastnameActionPerformed

    private void btnAdvancedDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedDeleteActionPerformed
        if (selectedAdvancedLicenseId != -1) {
            
            Object[] options = {"YES", "NO"};
            int n = JOptionPane.showOptionDialog(rootPane, "Are you sure you want to delete this driving license?", "Message: Driving License Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, rootPane);
            if (n != JOptionPane.YES_OPTION) {
                return;
            }
            
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
            LicensesJpaController controller = new LicensesJpaController(emf);

            try {
                controller.destroy(selectedAdvancedLicenseId);
                clearAdvancedLicenseTextFields();
                bindAdvancedLicensesTable();
                clearSearchLicenseTextFields();
                bindSearchLicensesTable();
                JOptionPane.showMessageDialog(rootPane, "The driving license was deleted successfully!", "Message: Driving License Deletion", JOptionPane.INFORMATION_MESSAGE);
            }
            catch (NonexistentEntityException ex) {
                Logger.getLogger(DrivingLicensesMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally {
                if (emf != null) {
                    emf.close();
                }
            }
        }
        else {
            
            JOptionPane.showMessageDialog(rootPane, "Please select a driving license for deletion!", "Warning: Driving License Deletion", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAdvancedDeleteActionPerformed

    private void btnAdvancedEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedEditActionPerformed
        if (selectedAdvancedLicenseId != -1) {
            
            String licenseId = jtfAdvancedLicenseId.getText();
            String lastname = jtfAdvancedLastname.getText();
            String firstname = jtfAdvancedFirstname.getText();
            String middlename = jtfAdvancedMiddlename.getText();
            String birthYear = jtfAdvancedBirthYear.getText();
            String firstLicense = ((JTextField)jDateChooserAdvancedFirstLicense.getDateEditor().getUiComponent()).getText();

            if (licenseId.isEmpty() || lastname.isEmpty() || firstname.isEmpty() || middlename.isEmpty() || birthYear.isEmpty() || firstLicense.isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "No field must be empty!", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidLicenseId(licenseId)) {

                JOptionPane.showMessageDialog(rootPane, "Field \"LICENSE ID\" must be integer greater than 0 and lower or equal than " + Integer.MAX_VALUE + "!", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidName(lastname)) {

                JOptionPane.showMessageDialog(rootPane, "Field \"LASTNAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidName(firstname)) {

                JOptionPane.showMessageDialog(rootPane, "Field \"FIRSTNAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidName(middlename)) {

                JOptionPane.showMessageDialog(rootPane, "Field \"FATHER'S NAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!isValidBirthYear(birthYear)) {

                JOptionPane.showMessageDialog(rootPane, "Field \"BIRTH YEAR\" must be integer greater or equal than 0 and lower or equal than " + Short.MAX_VALUE + "!", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (jDateChooserAdvancedFirstLicense.getDate() == null) {

                JOptionPane.showMessageDialog(rootPane, "Field \"FIRST LICENSE\" must be a date in the format \"DD/MM/YYYY\", e.g. 14/08/1999", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
            LicensesJpaController controller = new LicensesJpaController(emf);
            
            List<Licenses> licensesList = controller.getLicensesByLicenseIdWithRecordIdException(Integer.parseInt(licenseId), selectedAdvancedLicenseId);
            
            if (!licensesList.isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "The License Id " + "\"" + Integer.parseInt(licenseId) + "\" is already being used in another record!", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Licenses licenseInDB = controller.findLicenses(selectedAdvancedLicenseId);
            
            Licenses license = new Licenses();
            license.setId(selectedAdvancedLicenseId);
            license.setLicenseId(Integer.parseInt(licenseId));
            license.setLastname(lastname.trim());
            license.setFirstname(firstname.trim());
            license.setMiddlename(middlename.trim());
            license.setBirthYear(Short.parseShort(birthYear));
            license.setFirstLicense(jDateChooserAdvancedFirstLicense.getDate());
            
            if (license.getLicenseId() == licenseInDB.getLicenseId() && license.getLastname().equals(licenseInDB.getLastname()) && license.getFirstname().equals(licenseInDB.getFirstname()) && license.getMiddlename().equals(licenseInDB.getMiddlename()) && license.getBirthYear() == licenseInDB.getBirthYear() && license.getFirstLicense().equals(licenseInDB.getFirstLicense())) {
                if (emf != null) {
                    emf.close();
                }
                JOptionPane.showMessageDialog(rootPane, "At least one field must be modified!", "Message: Driving License Modification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try {
                controller.edit(license);
            } catch (Exception ex) {
                Logger.getLogger(DrivingLicensesMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if (emf != null) {
                emf.close();
            }
            
            clearAdvancedLicenseTextFields();
            bindAdvancedLicensesTable();
            clearSearchLicenseTextFields();
            bindSearchLicensesTable();
            
            JOptionPane.showMessageDialog(rootPane, "The driving license has been modified successfully!", "Message: Driving License Modification", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Please select a driving license for modification!", "Message: Driving License Modification", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAdvancedEditActionPerformed

    private void btnAdvancedClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedClearActionPerformed
        clearAdvancedLicenseTextFields();
    }//GEN-LAST:event_btnAdvancedClearActionPerformed

    private void btnAdvancedInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedInsertActionPerformed
        String licenseId = jtfAdvancedLicenseId.getText();
        String lastname = jtfAdvancedLastname.getText();
        String firstname = jtfAdvancedFirstname.getText();
        String middlename = jtfAdvancedMiddlename.getText();
        String birthYear = jtfAdvancedBirthYear.getText();
        String firstLicense = ((JTextField)jDateChooserAdvancedFirstLicense.getDateEditor().getUiComponent()).getText();
        
        if (licenseId.isEmpty() || lastname.isEmpty() || firstname.isEmpty() || middlename.isEmpty() || birthYear.isEmpty() || firstLicense.isEmpty()) {
            
            JOptionPane.showMessageDialog(rootPane, "No field must be empty!", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidLicenseId(licenseId)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"LICENSE ID\" must be an integer greater than 0 and lower or equal than " + Integer.MAX_VALUE + "!", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidName(lastname)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"LASTNAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidName(firstname)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"FIRSTNAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidName(middlename)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"FATHER'S NAME\" must contain only letters and the following symbols: '(',')','-'", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidBirthYear(birthYear)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"BIRTH YEAR\" must be an integer greater or equal than 0 and lower or equal than " + Short.MAX_VALUE + "!", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (jDateChooserAdvancedFirstLicense.getDate() == null) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"FIRST LICENSE\" must be a date in the format \"DD/MM/YYYY\", e.g. 14/08/1999", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
        LicensesJpaController controller = new LicensesJpaController(emf);
        
        Licenses license = controller.getLicenseByLicenseId(Integer.valueOf(licenseId));
        
        if (license != null) {
            
            JOptionPane.showMessageDialog(rootPane, "The License Id " + "\"" + license.getLicenseId() + "\" is already being used in another record!", "Message: Driving License Insertion", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        license = new Licenses();
        license.setLicenseId(Integer.valueOf(licenseId));
        license.setLastname(prepareName(lastname));
        license.setFirstname(prepareName(firstname));
        license.setMiddlename(prepareName(middlename));
        license.setBirthYear(Short.valueOf(birthYear));
        license.setFirstLicense(jDateChooserAdvancedFirstLicense.getDate());
        
        controller.create(license);
        if (emf != null) {
            emf.close();
        }
        
        clearAdvancedLicenseTextFields();
        bindAdvancedLicensesTable();
        clearSearchLicenseTextFields();
        bindSearchLicensesTable();
        JOptionPane.showMessageDialog(rootPane, "The driving license has been inserted successfully!", "Message: Driving License Insertion", JOptionPane.INFORMATION_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_btnAdvancedInsertActionPerformed

    private void btnAdvancedSearchWithLicenseIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvancedSearchWithLicenseIdActionPerformed
        String licenseId = jtfAdvancedLicenseId.getText();
        
        if (licenseId.isEmpty()) {

            JOptionPane.showMessageDialog(rootPane, "Please give the license id!", "Message: License Search", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (!isValidLicenseId(licenseId)) {
            
            JOptionPane.showMessageDialog(rootPane, "Field \"LICENSE ID\" must be an integer greater or equal than 0 and lower or equal than " + Integer.MAX_VALUE + "!", "Message: License Search", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
        LicensesJpaController controller = new LicensesJpaController(emf);
        Licenses fetchedLicense = controller.getLicenseByLicenseId(Integer.parseInt(jtfAdvancedLicenseId.getText()));
        if (emf != null) {
            emf.close();
        }
        
        jtfAdvancedSearch.setText("");
        deleteAdvancedLicensesTableRows();
        
        if (fetchedLicense != null) {
            
            jtfAdvancedLastname.setText(fetchedLicense.getLastname());
            jtfAdvancedFirstname.setText(fetchedLicense.getFirstname());
            jtfAdvancedMiddlename.setText(fetchedLicense.getMiddlename());
            jtfAdvancedBirthYear.setText(String.valueOf(fetchedLicense.getBirthYear()));
            jDateChooserAdvancedFirstLicense.setDate(fetchedLicense.getFirstLicense());
            
            selectedAdvancedLicenseId = fetchedLicense.getId();
            btnAdvancedEdit.setEnabled(true);
            btnAdvancedDelete.setEnabled(true);
            btnAdvancedInsert.setEnabled(false);
            btnAdvancedSearchWithLicenseId.setEnabled(false);
            btnAdvancedSearchWithLicenseId.setText("SELECTED");
        }
        else {
            String tmpAdvancedLicenseId = jtfAdvancedLicenseId.getText();
            clearAdvancedLicenseTextFields();
            JOptionPane.showMessageDialog(rootPane, "License Id \"" + tmpAdvancedLicenseId + "\" was not found!", "Message: License Search", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAdvancedSearchWithLicenseIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrivingLicensesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrivingLicensesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrivingLicensesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrivingLicensesMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrivingLicensesMain().setVisible(true);
            }
        });
    }
    
    private String prepareName(String s) {
        
        s = Normalizer.normalize(s.trim(), Normalizer.Form.NFD).replace("\\p{M}", "").toUpperCase();
        return s.replaceAll("\\p{M}", "").toUpperCase();
    }
    
    private boolean isValidLicenseId(String s) {
        
        return Utils.isInteger(s) && Integer.parseInt(s)>0 ;
    }
    
    private boolean isValidName(String s) {
        
        return isAlpha(s.trim());
    }
    
    private boolean isValidBirthYear(String s) {
        
        return Utils.isShort(s) && Short.parseShort(s)>0 ;
    }
    
    private boolean isAlpha(String name) {
        char[] chars = name.toCharArray();

        for (char c : chars) {
            if(!Character.isLetter(c) && c != '-' && c!='(' && c!=')' && c!=' ') {
                return false;
            }
        }
        
        return true;
    }
    
    private void clearSearchLicenseTextFields() {
        jtfSearchLicenseId.setText("");
        jtfSearchLastname.setText("");
        jtfSearchFirstname.setText("");
        jtfSearchMiddlename.setText("");
        jtfSearchBirthYear.setText("");
        jtfSearchFirstLicense.setText("");
        
        selectedSearchLicenseId = -1;
        tblSearchLicenses.clearSelection();
    }
    
    private void clearAdvancedLicenseTextFields() {
        jtfAdvancedLicenseId.setText("");
        jtfAdvancedLastname.setText("");
        jtfAdvancedFirstname.setText("");
        jtfAdvancedMiddlename.setText("");
        jtfAdvancedBirthYear.setText("");
        jDateChooserAdvancedFirstLicense.setDate(null);
        
        selectedAdvancedLicenseId = -1;
        tblAdvancedLicenses.clearSelection();
        btnAdvancedEdit.setEnabled(false);
        btnAdvancedDelete.setEnabled(false);
        btnAdvancedInsert.setEnabled(true);
        btnAdvancedSearchWithLicenseId.setEnabled(true);
        btnAdvancedSearchWithLicenseId.setText("FIND");
    }
    
    private void deleteAdvancedLicensesTableRows() {
        
        DefaultTableModel model = (DefaultTableModel) tblAdvancedLicenses.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }
    
    private void createSearchLicensesTable() {
        
        //DefaultTableModel model = new DefaultTableModel();
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        model.setColumnIdentifiers(new String [] {"LASTNAME", "FIRSTNAME", "FATHER'S NAME"});
        tblSearchLicenses.setModel(model);
    }
    
       private void createAdvancedLicensesTable() {
        
        //DefaultTableModel model = new DefaultTableModel();
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        model.setColumnIdentifiers(new String [] {"LASTNAME", "FIRSTNAME", "FATHER'S NAME"});
        tblAdvancedLicenses.setModel(model);
    }
    
    private void bindSearchLicensesTable(){
        
        if(jtfSearchSearch.getText().isEmpty()){
            return;
        }
        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
        LicensesJpaController controller = new LicensesJpaController(emf);
        jtfSearchSearch.setText(jtfSearchSearch.getText().trim());
        List<Licenses> licensesList = controller.getLicensesByLastname(prepareName(jtfSearchSearch.getText()));
        if (emf != null) {
            emf.close();
        }
        
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        model.setColumnIdentifiers(new String [] {"RECORD ID", "LICENSE ID", "LASTNAME", "FIRSTNAME", "FATHER'S NAME", "BIRTH YEAR", "FIRST LICENSE"});
        
        tblSearchLicenses.setModel(model);
        // Hide column 0
        tblSearchLicenses.getColumnModel().getColumn(0).setMinWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(0).setMaxWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(0).setPreferredWidth(0);
        // Hide column 1
        tblSearchLicenses.getColumnModel().getColumn(1).setMinWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(1).setMaxWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(1).setPreferredWidth(0);
        // Hide column 5
        tblSearchLicenses.getColumnModel().getColumn(5).setMinWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(5).setMaxWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(5).setPreferredWidth(0);
        // Hide column 6
        tblSearchLicenses.getColumnModel().getColumn(6).setMinWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(6).setMaxWidth(0);
        tblSearchLicenses.getColumnModel().getColumn(6).setPreferredWidth(0);
        
        for (Licenses license: licensesList) {
            model.addRow(new String[]{license.getId().toString(), String.valueOf(license.getLicenseId()), license.getLastname(), license.getFirstname(), license.getMiddlename(), String.valueOf(license.getBirthYear()), new SimpleDateFormat("dd/MM/yyyy").format(license.getFirstLicense())});
        }
        
        clearSearchLicenseTextFields();
        
        if (licensesList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No driving license was found with lastname which starts from \""+jtfSearchSearch.getText()+"\"", "Message: License Search", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void bindAdvancedLicensesTable(){
        
        if(jtfAdvancedSearch.getText().isEmpty()){
            return;
        }
        
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DrivingLicensesRegistryPU");
        LicensesJpaController controller = new LicensesJpaController(emf);
        jtfAdvancedSearch.setText(jtfAdvancedSearch.getText().trim());
        List<Licenses> licensesList = controller.getLicensesByLastname(prepareName(jtfAdvancedSearch.getText()));
        if (emf != null) {
            emf.close();
        }
        
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        model.setColumnIdentifiers(new String [] {"RECORD ID", "LICENSE ID", "LASTNAME", "FIRSTNAME", "FATHER'S NAME", "BIRTH YEAR", "FIRST LICENSE"});
        
        tblAdvancedLicenses.setModel(model);
        // Hide column 0
        tblAdvancedLicenses.getColumnModel().getColumn(0).setMinWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(0).setMaxWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(0).setPreferredWidth(0);
        // Hide column 1
        tblAdvancedLicenses.getColumnModel().getColumn(1).setMinWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(1).setMaxWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(1).setPreferredWidth(0);
        // Hide column 5
        tblAdvancedLicenses.getColumnModel().getColumn(5).setMinWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(5).setMaxWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(5).setPreferredWidth(0);
        // Hide column 6
        tblAdvancedLicenses.getColumnModel().getColumn(6).setMinWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(6).setMaxWidth(0);
        tblAdvancedLicenses.getColumnModel().getColumn(6).setPreferredWidth(0);
        
        for (Licenses license: licensesList) {
            model.addRow(new String[]{license.getId().toString(), String.valueOf(license.getLicenseId()), license.getLastname(), license.getFirstname(), license.getMiddlename(), String.valueOf(license.getBirthYear()), new SimpleDateFormat("dd/MM/yyyy").format(license.getFirstLicense())});
        }
        
        clearAdvancedLicenseTextFields();
        
        if (licensesList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No driving license was found with lastname which starts from \""+jtfAdvancedSearch.getText()+"\"", "Message: License Search", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdvancedClear;
    private javax.swing.JButton btnAdvancedDelete;
    private javax.swing.JButton btnAdvancedEdit;
    private javax.swing.JButton btnAdvancedInsert;
    private javax.swing.JButton btnAdvancedSearchWithLastname;
    private javax.swing.JButton btnAdvancedSearchWithLicenseId;
    private javax.swing.JButton btnSearchSearch;
    private com.toedter.calendar.JDateChooser jDateChooserAdvancedFirstLicense;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelAdvanced;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jtfAdvancedBirthYear;
    private javax.swing.JTextField jtfAdvancedFirstname;
    private javax.swing.JTextField jtfAdvancedLastname;
    private javax.swing.JTextField jtfAdvancedLicenseId;
    private javax.swing.JTextField jtfAdvancedMiddlename;
    private javax.swing.JTextField jtfAdvancedSearch;
    private javax.swing.JTextField jtfSearchBirthYear;
    private javax.swing.JTextField jtfSearchFirstLicense;
    private javax.swing.JTextField jtfSearchFirstname;
    private javax.swing.JTextField jtfSearchLastname;
    private javax.swing.JTextField jtfSearchLicenseId;
    private javax.swing.JTextField jtfSearchMiddlename;
    private javax.swing.JTextField jtfSearchSearch;
    private javax.swing.JTable tblAdvancedLicenses;
    private javax.swing.JTable tblSearchLicenses;
    // End of variables declaration//GEN-END:variables
    int selectedSearchLicenseId = -1;
    int selectedAdvancedLicenseId = -1;
}
